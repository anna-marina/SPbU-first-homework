//do ariphmetics operations with stack

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node
{
    int value;
    struct node *next;
} node;


void  stack_delete_all (node **head)
{
	node *temp = *head;
	while (temp != NULL)
	{
		*head = (*head)->next;
		free(temp);
		temp = *head;
	}
	return;
}

int stack_pop(node **head)
{
    node* prev = NULL;
    int val;
    if (head == NULL)
    {
        exit(-1);
    }
    prev = (*head);
    val = prev->value;
    (*head) = (*head)->next;
    free(prev);
    return val;
}


void stack_push(node **head, int data)
{
    node *tmp = (node*) malloc(sizeof(node));
    tmp->value = data;
    tmp->next = (*head);
    (*head) = tmp;
}

int main()
{
    node* head = NULL;
    char a;
    while(1)
    {
        scanf("%c", &a);
        if(('0' <= a) && (a <= '9'))
        {
            int t = 0;
            while(('0' <= a) && (a <= '9'))
            {
                t *= 10;
                t += a - '0';
                scanf("%c", &a);
            }
            stack_push(&head, t);
        }
        if((a == '+') || (a == '-') || (a == '*') ||(a == '/'))
        {
            int t1 = stack_pop(&head);
            int t2 = stack_pop(&head);
            int t3;
            if (a == '+')
                t3 = t2 + t1;
            if (a == '-')
                t3 = t2 - t1;
            if (a == '*')
                t3 = t2 * t1;
            if (a == '/')
                t3 = t2 / t1;
            stack_push(&head, t3);
        }
        if(a == '=')
        {
            int t = stack_pop(&head);
            printf("%d", t);
            stack_delete_all(&head);
            return 0;
        }
    }
    return 0;
}
