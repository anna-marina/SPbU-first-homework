/*. Будет использоваться для автоматизированного тестирования.
a <число> - добавляет число в начало списка,
r <число> - удаляет число из списка,
p - печатает список через запятую с пробелом, в конце - перенос строки,
q - корректно завершает программу.*/

#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int value;
    struct Node *next;
} Node;

void push(Node **head, int data)
{
    Node *tmp = (Node*) malloc(sizeof(Node));
    tmp->value = data;
    tmp->next = (*head);
    (*head) = tmp;
}

int pop(Node **head)
{
    Node* prev = NULL;
    int val;
    if (head == NULL)
    {
        exit(-1);
    }
    prev = (*head);
    val = prev->value;
    (*head) = (*head)->next;
    free(prev);
    return val;
}


Node* getNth(Node* head, int n)
{
    int counter = 0;
    while (counter < n && head)
    {
        head = head->next;
        counter++;
    }
    return head;
}

int deleteNth(Node **head, int n)
{
    if (n == 0)
    {
        return pop(head);
    } else
    {
        Node *prev = getNth(*head, n-1);
        Node *elm  = prev->next;
        int val = elm->value;

        prev->next = elm->next;
        free(elm);
        return val;
    }
}

void printLinkedList(const Node *head)
 {
    while (head)
    {
        printf("%d, ", head->value);
        head = head->next;
    }
    printf("\n");
}


void deleteList(Node **head)
 {
    while ((*head)->next)
    {
        pop(head);
        *head = (*head)->next;
    }
    free(*head);
}

int main()
{
    Node* head = NULL;
    char tc;
    int tn;
    while(1)
    {
        scanf("%c", &tc);
        if(tc == 'a')
        {
            scanf("%d", &tn);
            push(&head, tn);
        }
        if(tc == 'r')
        {
            scanf("%d", &tn);
            deleteNth(&head, tn);
        }
        if(tc == 'p')
        {
            printLinkedList(head);
        }
        if(tc == 'q')
        {
           deleteList(&head);
           return 0;
        }

    }
    return 0;
}

