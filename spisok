/*. Будет использоваться для автоматизированного тестирования.
a <число> - добавляет число в начало списка,
r <число> - удаляет число из списка,
p - печатает список через запятую с пробелом, в конце - перенос строки,
q - корректно завершает программу.*/

#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int value;
    struct Node *next;
} Node;

void push(Node **head, int data)
{
    Node *tmp = (Node*) malloc(sizeof(Node));
    tmp->value = data;
    tmp->next = (*head);
    (*head) = tmp;
}

void deleteNth (Node **head, int data)
{
	Node *temp = *head;
	Node *prev = NULL;
	int ok = 0;
	while (temp != NULL)
	{
		if (temp->value == data)
		{
			if (temp == *head) *head = (*head)->next;
			else prev->next = temp->next;
			ok = 1;
			break;
		}
		prev = temp;
		temp = temp->next;
		if (ok) break;
	}
	free(temp);
	return;
}

void printLinkedList(const Node *head)
 {
    while (head)
    {
        printf("%d", head->value);
        head = head->next;
        if(head)
            printf(", ");
    }
    printf("\n");
}


void deleteList(Node **head)
{
	Node *temp = *head;
	while (temp != NULL)
	{
		*head = (*head)->next;
		free(temp);
		temp = *head;
	}
	return;
}

int main()
{
    Node* head = NULL;
    char tc;
    int tn;
    while(1)
    {
        scanf("%c", &tc);
        if(tc == 'a')
        {
            scanf("%d", &tn);
            push(&head, tn);
        }
        if(tc == 'r')
        {
            scanf("%d", &tn);
            deleteNth(&head, tn);
        }
        if(tc == 'p')
        {
            printLinkedList(head);
        }
        if(tc == 'q')
        {
           deleteList(&head);
           return 0;
        }

    }
    return 0;
}
